@page "/Depatments"
@inject IJSRuntime JS

<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#TwoColumnModal"> Добавить отдел </button>

<table class="table table-hover w-50 table-sm mt-3">
    <thead class="thead-light">
        <tr>
            <th scope="col">Наименование</th>
            <th scope="col">Количество сотрудников</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var dep in departments)
        {
            <tr @ondblclick="@(()=>OpenUpdateModal(dep.DepartmentID))">
                <td>@dep.Department</td>
                <td>@dep.NumberOfEmployees</td>
            </tr>
        }
    </tbody>
</table>

<ElinCoureseProjectClient.Pages.Markup.ModalWindowMarkup.TwoColumnModal FirstColemnName="Наименование отдела" ModalTitle="Добавить отдел" SecondColumnName="Количество сотрудников" Enum="Models.TwoColumnModalEnum.Depatments" />
<ElinCoureseProjectClient.Pages.Markup.ModalWindowMarkup.UpdateDepatmentModal Department="targetField" />

@code {
  private CPS.Departments targetField { get; set; }

  protected override async Task OnInitializedAsync()
  {
      departments = await Data.GrpcClient.GetObjectList(Data.ObjectType.Depatment) as List<CPS.Departments>;
      Data.GrpcClient.StateChanged += OnStateChanged;
      await InvokeAsync(() => StateHasChanged());
  }
  private void DeleteDepatment(CPS.Departments depatments)
  {
      Data.GrpcClient.DeleteObject(depatments.DepartmentID, Data.ObjectType.Depatment);
  }
  private async void OnStateChanged(object sender, EventArgs arg)
  {
      departments = await Data.GrpcClient.GetObjectList(Data.ObjectType.Depatment) as List<CPS.Departments>;
      await InvokeAsync(() => StateHasChanged());
  }
  private async void OpenUpdateModal(int ID)
  {
      targetField = (Data.GrpcClient.GetOneObject(ID, Data.ObjectType.Depatment) as CPS.Departments);
      await JS.InvokeVoidAsync("UpdateDepatmentModal");
  }
  List<CPS.Departments> departments = new List<CPS.Departments>();
}
