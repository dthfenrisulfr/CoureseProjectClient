@page "/Positions"
@inject IJSRuntime JS

    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#TwoColumnModal"> Добавить должность </button>

    <table class="table table-hover w-50 table-sm mt-3">
        <thead class="thead-light">
            <tr>
                <th scope="col">Наименование</th>
                <th scope="col">Оклад</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pos in positions)
            {
            <tr @ondblclick="(() => OpenUpdateModal(pos.PositionID))">
                <td>@pos.Position</td>
                <td>@pos.Salary</td>
            </tr>
            }
        </tbody>
    </table>

<ElinCoureseProjectClient.Pages.Markup.ModalWindowMarkup.TwoColumnModal FirstColemnName="Наименование должности" SecondColumnName="Оклад" Enum="Models.TwoColumnModalEnum.Positions" />
<ElinCoureseProjectClient.Pages.Markup.ModalWindowMarkup.UpdatePositionModal Position="targetField" />

    @code {
      private CPS.Positions targetField { get; set; }

      protected override async Task OnInitializedAsync()
      {
          positions = await Data.GrpcClient.GetObjectList(Data.ObjectType.Position) as List<CPS.Positions>;
          Data.GrpcClient.StateChanged += OnStateChanged;
          await InvokeAsync(() => StateHasChanged());
      }
      private void DeletePosition(CPS.Positions positions)
      {
          Data.GrpcClient.DeleteObject(positions.PositionID, Data.ObjectType.Position);
      }
      private async void OnStateChanged(object sender, EventArgs arg)
      {
          positions = await Data.GrpcClient.GetObjectList(Data.ObjectType.Position) as List<CPS.Positions>;
          await InvokeAsync(() => StateHasChanged());
      }
      private async void OpenUpdateModal(int ID)
      {
          targetField = (Data.GrpcClient.GetOneObject(ID, Data.ObjectType.Position) as CPS.Positions);
          await JS.InvokeVoidAsync("UpdatePositionModal");
      }
      List<CPS.Positions> positions = new List<CPS.Positions>();
    }
