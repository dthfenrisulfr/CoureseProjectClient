<div class="modal fade" id="AddOrderModal" tabindex="-1" role="dialog" aria-labelledby="AddOrderModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="AddOrderModalLabel">Новый заказ</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="Experience">Заказчик</span>
                            </div>
                            <select class="form-control" id="setCustomer" style="width: 100%" @bind="@CustomerID">
                                <option></option>
                                @foreach (var cust in customers)
                                {
                                    <option value="@cust.CustomerID">@cust.SecondName @cust.Name</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="Experience">Сотрудник</span>
                            </div>
                            <select class="form-control" id="setStaff" style="width: 100%" @bind="@StaffID">
                                <option></option>
                                @foreach (var staff in staff)
                                {
                                    <option value="@staff.Passport">@staff.SecondName @staff.Name</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="Experience">Товары</span>
                            </div>
                            <select class="form-control" id="setProducts" style="width: 100%" @bind="@orders.AllProducts">
                                <option></option>
                                @foreach (var prod in products)
                                {
                                    <option value="@prod.ProductID">@prod.ProductName</option>
                                }
                            </select>
                        </div>
                    </div>
                </form>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Закрыть</button>
                <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick="@(() => Save())">Сохранить</button>
            </div>
        </div>
    </div>
</div>

@code{
  private CPS.Orders orders = new CPS.Orders();
  private CPS.Customers customer = new CPS.Customers();
  private List<CPS.Staff> staff = new List<CPS.Staff>();
  private List<CPS.Customers> customers = new List<CPS.Customers>();
  private List<CPS.Products> products = new List<CPS.Products>();
  private int CustomerID {
      get { return _customerId; }
      set
      {
          _customerId = value;
          SetOrderCustomer(value);
      }
  }
  private int StaffID{
      get { return _staffId; }
      set
      {
          _staffId = value;
          SetOrderStaff(value);
      }
  }
  private int ProductID {
      get { return _productId; }
      set
      {
          _productId = value;
          SetOrderProduct(_productId);
      }
  }

  protected override async Task OnInitializedAsync()
  {
      staff = await Data.GrpcClient.GetObjectList(Data.ObjectType.Staff) as List<CPS.Staff>;
      customers = await Data.GrpcClient.GetObjectList(Data.ObjectType.Customer) as List<CPS.Customers>;
      products = await Data.GrpcClient.GetObjectList(Data.ObjectType.Product) as List<CPS.Products>;
  }

  private void Save()
  {
      orders.Condition = "false";
      orders.Date = DateTime.Now.Ticks;
      Data.GrpcClient.AddObject(orders, Data.ObjectType.Order);
  }
  private void SetOrderCustomer(int value)
  {
      var customer = Data.GrpcClient.GetOneObject(value, Data.ObjectType.Customer) as CPS.Customers;
      orders.Customer = customer;
  }
  private void SetOrderStaff(int value)
  {
      var staff = Data.GrpcClient.GetOneObject(value, Data.ObjectType.Staff) as CPS.Staff;
      orders.Staff = staff;
  }
  private void SetOrderProduct(int value)
  {
      var product = Data.GrpcClient.GetOneObject(value, Data.ObjectType.Product) as CPS.Products;
      var str = orders.AllProducts + ", " + product.ProductName;
      orders.AllProducts = str;
  }
  private int _customerId;
  private int _staffId;
  private int _productId;
}